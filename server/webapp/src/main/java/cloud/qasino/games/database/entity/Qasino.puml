@startuml src/main/resources/plantuml/Casino.png
		skinparam classAttributeIconSize 0
		package "cloud.qasino.card" {
		package "entity" {

class Visitor {
- visitorId : int
- created : String
..
- visitorName : String
- email : String
- balance : int
- pawn : int
-- PREPARE --
+ pawnShip()
-- MAIN --
+ repayLoan()
}
Visitor "1" -right- "n" Player: has played

class Player {
- playerId : int
- created : String
..
- (MoreToOne) visitorId : Visitor
- (MoreToOne) gameId : Game
..
- avatar : String
- human : boolean
- aiLevel : AiLevel
- playingOrder : int
- balance : int
-- CRUD --
}
Player -right- AiLevel : intelligence
Player "n" -down- "1" Game : plays

enum AiLevel {
DUMB
NORMAL
SMART
..
HUMAN
}

class Game {
+ cardGameId : int
- created : String
..
- (OneToOne) winner: Player
..
- type : Type
- style : Style
- state : GameState
- ante: int
-- PREPARE --
+ setPlayingOrder(in: boolean humanFirst)
+ shuffleDeck(in: #jokers, out: deck)
-- MAIN --
+ layoutOnTable(out: playingCards on table)
+ getAllHands(out: playingCards per hand)
}

Game -left- Type : playingCard
Game -down- Style : style
Game "1" -right- "n" PlayingCard : deck

enum Type {
HIGHLOW
BLACKJACK
}

enum Style {
	anteToWin: enum
	bettingStrategy : enum
	numOfDeck : enum
	insuranceCost : enum
	roundsToWin : enum
	maxMoves : enum
}

class PlayingCard {
- playingCardId : int
- created : String
..
- (MoreToOne) gameId : Game
- (MoreToOne) hand : Player
..
- value: int
- order : int
- location : Location
-- PREPARE --
- calculateValue(in:Type)
}
PlayingCard -down- Location
PlayingCard "0..n" -up- "0..1" Player : in hand

enum Location {
STACK
PILE_DRAW
PILE_DISCARD
HAND_OPEN
HAND_CLOSED
TABLE_MIDDLE
}


package "gameEngine" {
class Card {
- cardId: String
..
- rank : rank
- suit : suit
- thumbnailPath : String
--
}

class CardEvent {
- cardEventId : int
- created : String
..
- (MoreToOne) playingCardId : Card
- (MoreToOne) gameId : Game
- (MoreToOne) playerId : Player
.. json..
- playerOrder : int
- roundNumber : int
- moveNumber : int
- move : Move
- bet : int
-- PREPARE --
- validateAction(in: CardEvent)
-- MAIN --
+ processAction(in/out: CardEvent)
-- FINISH --
- updatePlayingCards()
- calculatePlayerBalance()
+ determineNextAction
(out: Player, Moves, GameState)
}
CardEvent -up- Move : move

enum Move {
.. Generic
DEAL
PASS
HIGHER
LOWER
}
}
@enduml